sp=unique(input[[species]][sp_numbers[[1]]])
if(identical(sp, character(0))){
stop("No species found in selected area")
}
if(input_cl=='df_ob'){
rgrid <- raster(extent(sfdf), resolution = res,crs=CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid=st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid_range=function(iucn_shp,grid_to_use){
r_grid_sf=grid_to_use
sf_to_intersect=iucn_shp
st_crs(r_grid_sf)=st_crs(sf_to_intersect)
sps_grid=st_intersects(sf_to_intersect,r_grid_sf)
intersected_object=sps_grid
area=unlist(lapply(intersected_object,length))
sp_range_df=cbind.data.frame(species=iucn_shp[[species]],area/(res*res*10000))
return(sp_range_df)
}
input=input[input[[species]]%in%sp,]
input_combined <- aggregate(input,
by = list(input$BINOMIAL),
FUN = mean)
input_combined=input_combined[,c('Group.1','geometry')]
colnames(input_combined)[1]=species
tmp=iucn_to_grid_range(iucn_shp=input_combined,grid_to_use=rgrid)
}else{
area_input=function(input,sp){
temp=st_area(input[input[[species]]%in%sp,])
attributes(temp) = NULL
temp=sum(temp)
return(temp=temp/1000000)
}
all_area=lapply(sp,area_input,input=input)
tmp=cbind.data.frame(species=input$binomial[sp_numbers[[1]]],area=unlist(all_area))
}
tmp=merge(tmp,input[,c(species,'category')],by.x='species',by.y=species)
tmp=tmp[,-4]
er_df=cbind.data.frame(status=c('DD','LC','NT','VU','EN','CR','EW','EX'),ER=c(0.0513,0.0009,0.0071,0.0513,0.4276,0.9688,1,1))
tmp=unique(tmp)
tmp=merge(tmp, er_df, by.x=category, by.y='status', sort = TRUE)
return(wege_temp=lapply(1, function(x) sum(sqrt(1/tmp$area)*tmp$ER)))
}
get_wege(target_area=niassa,input=test,x='decimallongitude',y='decimallatitude',species='BINOMIAL',category='category',res = 1)
library(WEGE)
library(sf)
library(WEGE)
amphibians=read.csv(file.choos(),sp=';',stringsAsFactors = F)
get_kba_criteria <- function(target_area,input,x,y,species='binomial',category = 'category',res = 1) {
require(sf)
require(raster)
if (any(class(input) %in% "sf")) {
input_cl <- 'sf_ob'}else {input_cl <- 'df_ob'}
if (any(class(target_area) %in% 'SpatialPolygonsDataFrame')) {
target_area <- st_as_sf(target_area)
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% "data.frame")) {
crs_ta <- st_crs(target_area)
input <-  st_as_sf(x = input,coords = c(x,y),crs = crs_ta)
}
sps_grid <- st_intersects(input,target_area)
intersected_object_t <- t(sps_grid)
sp_numbers <- intersected_object_t[1]
sp <- unique(input[[species]][sp_numbers[[1]]])
if (identical(sp, character(0))) {
stop("No species found in selected area")}
if (input_cl == 'df_ob') {
rgrid  <-  raster(extent(input), resolution = res,crs = CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid <- st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid_range <- function(iucn_shp,grid_to_use) {
r_grid_sf <- grid_to_use
sf_to_intersect <- iucn_shp
st_crs(r_grid_sf) <- st_crs(sf_to_intersect)
sps_grid <- st_intersects(sf_to_intersect,r_grid_sf)
intersected_object <- sps_grid
area <- unlist(lapply(intersected_object,length))
sp_range_df <- cbind.data.frame(species = iucn_shp[[species]],area = area)
return(sp_range_df)
}
input <- input[input[[species]] %in% sp,]
input_combined <- aggregate(input,
by = list(input[[species]]),
FUN = mean)
input_combined <- input_combined[,c('Group.1','geometry')]
colnames(input_combined)[1] <- species
tmp <- iucn_to_grid_range(iucn_shp = input_combined,grid_to_use = rgrid)
tmp <- merge(tmp,input[,c(species,'category')],by.x = 'species',by.y = species)
tmp <- tmp[,-4]
tmp <- unique(tmp)
min_rangeA1a <- (200*res)+1
min_rangeA1b <- (100*res)+1
min_rangeB1 <- (1000*res)+1
KBA_A1a <- tmp[tmp$category == "CR"|tmp$category == "EN" & tmp$area < min_rangeA1a,]
if(nrow(KBA_A1a) == 0){
KBA_A1a_2 <- data.frame()
}else{KBA_A1a_2 <- cbind.data.frame(species = KBA_A1a$species,A1a = 'yes')}
KBA_A1b <- tmp[tmp$category == "VU" & tmp$area < min_rangeA1b,]
if(nrow(KBA_A1b) == 0){
KBA_A1b_2 <- data.frame()
}else{KBA_A1b_2 <- cbind.data.frame(species = KBA_A1b$species,A1b = 'yes')}
KBA_A1e <- tmp[tmp$perc_kba == 100,]
if(nrow(KBA_A1e) == 0){
KBA_A1e_2 <- data.frame()
}else{
KBA_A1e_2 <- cbind.data.frame(species = KBA_A1e$species,A1e = 'yes')}
KBA_B1 <- tmp[tmp$perc_kba < min_rangeB1,]
if(nrow(KBA_A1a) == 0){
KBA_B1_2 <- data.frame()
}else{
KBA_B1_2 <- cbind.data.frame(species = KBA_B1$species,B1 = 'yes')}
}else {
area_input <- function(input,sp) {
temp <- st_area(input[input[[species]] %in% sp,])
attributes(temp) <- NULL
temp <- sum(temp)
return(temp <- temp/1000000)
}
all_area <- lapply(sp,area_input,input = input)
tmp <- cbind.data.frame(species = input$binomial[sp_numbers[[1]]],area = unlist(all_area))
input_subset <- st_intersection(input,target_area)
area_kba <- lapply(sp,area_input,input = input_subset)
tmp_2 <- cbind.data.frame(species = input_subset$binomial,area_kba = unlist(area_kba))
tmp <- merge(tmp,input[,c(species,'category')],by.x = 'species',by.y = species)
tmp <- tmp[,-4]
tmp <- unique(tmp)
tmp <- merge(tmp,tmp_2,by.x = 'species',by.y = 'species')
tmp$perc_kba <- 100*(tmp$area_kba/tmp$area)
min_rangeA1a <- 1
min_rangeA1b <- 0.5
min_rangeB1 <- 10
KBA_A1a <- tmp[tmp$category == "CR"|tmp$category == "EN" & tmp$perc_kba > min_rangeA1a,]
if(nrow(KBA_A1a) == 0){
KBA_A1a_2=data.frame()
}else{KBA_A1a_2 <- cbind.data.frame(species = KBA_A1a$species,A1a = 'yes')}
KBA_A1b=tmp[tmp$category =="VU" & tmp$perc_kba > min_rangeA1b,]
if(nrow(KBA_A1b) == 0){
KBA_A1b_2=data.frame()
}else{KBA_A1b_2 <- cbind.data.frame(species = KBA_A1b$species,A1b = 'yes')}
KBA_A1e=tmp[tmp$perc_kba == 100,]
if(nrow(KBA_A1e) == 0){
KBA_A1e_2 <- data.frame()
}else{
KBA_A1e_2 <- cbind.data.frame(species = KBA_A1e$species,A1e = 'yes')}
KBA_B1 <- tmp[tmp$perc_kba>min_rangeB1,]
if(nrow(KBA_A1a) == 0){
KBA_B1_2 <- data.frame()
}else{
KBA_B1_2 <- cbind.data.frame(species = KBA_B1$species,B1 = 'yes')}
}
kba_df_tmp=unique(rbind(KBA_A1a,KBA_A1b,KBA_A1e,KBA_B1))
if (nrow(kba_df_tmp) == 0){
return(cat('No species found to trigger KBA status\n'))
}else{
if(nrow(KBA_A1a_2) == 0){
kba_df_tmp$A1a <- 'no'}else{
kba_df_tmp <- merge(kba_df_tmp,KBA_A1a_2,by.x = 'species',by.y = 'species')}
if(nrow(KBA_A1b_2) == 0){
kba_df_tmp$A1b <- 'no'}else{
kba_df_tmp <- merge(kba_df_tmp,KBA_A1b_2,by.x = 'species',by.y = 'species')}
if(nrow(KBA_A1e_2) == 0){
kba_df_tmp$A1e <- 'no'}else{
kba_df_tmp <- merge(kba_df_tmp,KBA_A1e_2,by.x = 'species',by.y = 'species')}
if(nrow(KBA_B1_2) == 0){
kba_df_tmp$B1 <- 'no'}else{
kba_df_tmp <- merge(kba_df_tmp,KBA_B1_2,by.x = 'species',by.y = 'species')}
return(kba_df_tmp)
}
}
library(WEGE)
get_kba_criteria
?get_kba_criteria
library(WEGE)
aggregate
sf::aggregate
library(WEGE)
?get_wege
spat_ras <- function(target_area,input,x,y,species='binomial',category = 'category',res = 1) {
require(sf)
require(raster)
if (any(class(input) %in% "sf")) {
input_cl <- 'sf_ob'}else {input_cl <- 'df_ob'}
if (any(class(target_area) %in% 'SpatialPolygonsDataFrame')) {
target_area <- st_as_sf(target_area)
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% "data.frame")) {
crs_ta <- st_crs(target_area)
input <-  st_as_sf(x = input,coords = c(x,y),crs = crs_ta)
}
sps_grid <- st_intersects(input,target_area)
intersected_object_t <- t(sps_grid)
sp_numbers <- intersected_object_t[1]
sp <- unique(input[[species]][sp_numbers[[1]]])
if (identical(sp, character(0))) {
stop("No species found in selected area")
}
if (input_cl == 'df_ob') {
rgrid  <-  raster(extent(input), resolution = res,crs = CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid <- st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid_range <- function(iucn_shp,grid_to_use) {
r_grid_sf <- grid_to_use
sf_to_intersect <- iucn_shp
st_crs(r_grid_sf) <- st_crs(sf_to_intersect)
sps_grid <- st_intersects(sf_to_intersect,r_grid_sf)
intersected_object <- sps_grid
area <- unlist(lapply(intersected_object,length))
sp_range_df <- cbind.data.frame(species = iucn_shp[[species]],area/(res*res*10000))
return(sp_range_df)
}
input <- input[input[[species]] %in% sp,]
input_combined <- aggregate(input,
by = list(input$BINOMIAL),
FUN = mean)
input_combined <- input_combined[,c('Group.1','geometry')]
colnames(input_combined)[1] <- species
tmp <- iucn_to_grid_range(iucn_shp = input_combined,grid_to_use = rgrid)
}else {
area_input <- function(input,sp) {
temp <- st_area(input[input[[species]] %in% sp,])
attributes(temp) <- NULL
temp <- sum(temp)
return(temp <- temp/1000000)
}
all_area <- lapply(sp,area_input,input = input)
tmp <- cbind.data.frame(species = sp,area = unlist(all_area))
}
tmp <- merge(tmp,input[,c(species,'category')],by.x = 'species',by.y = species)
tmp <- tmp[,-4]
er_df <- cbind.data.frame(status = c('DD','LC','NT','VU','EN','CR','EW','EX'),ER = c(0.0513,0.0009,0.0071,0.0513,0.4276,0.9688,1,1))
tmp <- unique(tmp)
tmp <- merge(tmp, er_df, by.x = category, by.y = 'status', sort = TRUE)
rgrid  <-  raster(extent(target_area), resolution = res,crs = CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid <- st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid=function(iucn_shp,grid_to_use){
r_grid_sf=grid_to_use
sf_to_intersect=iucn_shp
st_crs(r_grid_sf)=st_crs(sf_to_intersect)
sps_grid=st_intersects(sf_to_intersect,r_grid_sf)
intersected_object=sps_grid
intersected_object_t=t(intersected_object)
list_final=list()
for (i in seq_along(intersected_object_t)){
cat(i,length(intersected_object_t),'\n')
list_final[i]=intersected_object_t[i]
}
names(list_final)=1:nrow(grid_to_use)
li_2 <- lapply(seq_along(list_final), function(i) {
list_final[[i]] <- as.character(iucn_shp[[species]][list_final[[i]]])
})
li_3=li_2
names(li_3)=1:nrow(grid_to_use)
return(li_3)
}
sp_grid=iucn_to_grid(iucn_shp=input,grid_to_use=rgrid)
kba_size=res*res*10000
tmp[tmp$area<kba_size,]$area = kba_size
tmp$perc_kba <- 100*(kba_size/tmp$area)
min_rangeA1a <- 1
min_rangeA1b <- 0.5
min_rangeB1 <- 10
df_final = data.frame()
for (i in seq_along(sp_grid)){
#cat(i,length(sp_grid),'\n')
temp_df=tmp[tmp$species %in% sp_grid[[i]],]
if(nrow(temp_df)==0){
we_temp=0
wege_temp=0
ed_temp=0
edge_temp=0
ge_temp=0
KBA_A1a_temp=0
KBA_A1b_temp=0
KBA_A1e_temp=0
KBA_B1_temp=0
}else{
we_temp=lapply(1, function(x) sum(1/temp_df$area))
wege_temp=lapply(1, function(x) sum(sqrt(1/temp_df$area)*temp_df$ER))
#ed_temp=lapply(1, function(x) sum(temp_df$ED))
ed_temp=0
#edge_temp=lapply(1, function(x) sum(log((temp_df$ED)*(temp_df$ER+1))))
edge_temp=0
#ge_temp=lapply(1, function(x) sum(temp_df$ER))
ge_temp=0
KBA_A1a_temp=lapply(1, function(x) if (any(temp_df[temp_df$category =="CR"|temp_df$category=="EN",]$perc_kba>min_rangeA1a)) {1} else {0})
KBA_A1b_temp=lapply(1, function(x) if (any(temp_df[temp_df$category=="VU",]$perc_kba>min_rangeA1b)) {1} else {0})
KBA_A1e_temp=lapply(1, function(x) if (any(temp_df$perc_kba==100)) {1} else {0})
KBA_B1_temp=lapply(1, function(x) if (any(temp_df$perc_kba>min_rangeB1)) {1} else {0})
df_temp=cbind.data.frame(i,we=unlist(we_temp),wege=unlist(wege_temp),GE=unlist(ge_temp),ED=unlist(ed_temp),EDGE=unlist(edge_temp),kba_A1a=unlist(KBA_A1a_temp),kba_A1b=unlist(KBA_A1b_temp),kba_A1e=unlist(KBA_A1e_temp),kba_B1=unlist(KBA_B1_temp))
}
df_final=rbind(df_final,df_temp)
}
r  <-  raster(extent(target_area), resolution = res,crs = CRS(crs_ta$proj4string))
r_GE=r
r_GE[]=df_final$GE
r_ED=r
r_ED[]=df_final$ED
r_EDGE=r
r_EDGE[]=df_final$EDGE
r_wege=r
r_wege[]=df_final$wege
r_we=r
r_we[]=df_final$we
r_A1a=r
r_A1a[]=df_final$kba_A1a
r_A1b=r
r_A1b[]=df_final$kba_A1b
r_A1e=r
r_A1e[]=df_final$kba_A1e
r_B1=r
r_B1[]=df_final$kba_B1
r_Kbas=sum(r_A1a,r_A1b,r_A1e,r_B1)
r_Kbas[r_Kbas>0]=1
raster_stack=stack(r_A1a,r_A1b,r_A1e,r_B1,r_GE,r_ED,r_EDGE,r_wege,r_we,r_Kbas)
plot(r_Kbas)
#plot(target_area$geometry,add=T)
return(raster_stack)
}
paste0("No column found with the name - ",paste(species))
species
species='BINOMIAL'
paste0("No column found with the name - ",paste(species))
spat_ras <- function(target_area,input,x,y,species='binomial',category = 'category',ed = FALSE,res = 1) {
require(sf)
require(raster)
if(is.null(input[[species]])){
stop(paste0("No column found with the name - ",paste(species)))
}
if(is.null(input[[category]])){
stop(paste0("No column found with the name - ",paste(category)))
}
if (ed) {
if (is.null(input[[ed]])) {
stop(paste0("No column found with the name - ",paste(ed)))
}}
if (any(class(input) %in% "sf")) {
input_cl <- 'sf_ob'}else {input_cl <- 'df_ob'}
if (any(class(target_area) %in% 'SpatialPolygonsDataFrame')) {
target_area <- st_as_sf(target_area)
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% 'SpatialPolygonsDataFrame')) {
input <- st_as_sf(input)
if (!st_crs(target_area) == st_crs(input)) {
stop("Inputs have a different projection")
}
}
if (any(class(input) %in% "data.frame")) {
crs_ta <- st_crs(target_area)
input <-  st_as_sf(x = input,coords = c(x,y),crs = crs_ta)
}
sps_grid <- st_intersects(input,target_area)
intersected_object_t <- t(sps_grid)
sp_numbers <- intersected_object_t[1]
sp <- unique(input[[species]][sp_numbers[[1]]])
if (identical(sp, character(0))) {
stop("No species found in selected area")
}
if (input_cl == 'df_ob') {
rgrid  <-  raster(extent(input), resolution = res,crs = CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid <- st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid_range <- function(iucn_shp,grid_to_use) {
r_grid_sf <- grid_to_use
sf_to_intersect <- iucn_shp
st_crs(r_grid_sf) <- st_crs(sf_to_intersect)
sps_grid <- st_intersects(sf_to_intersect,r_grid_sf)
intersected_object <- sps_grid
area <- unlist(lapply(intersected_object,length))
sp_range_df <- cbind.data.frame(species = iucn_shp[[species]],area/(res*res*10000))
return(sp_range_df)
}
input <- input[input[[species]] %in% sp,]
input_combined <- aggregate(input,
by = list(input$BINOMIAL),
FUN = mean)
input_combined <- input_combined[,c('Group.1','geometry')]
colnames(input_combined)[1] <- species
tmp <- iucn_to_grid_range(iucn_shp = input_combined,grid_to_use = rgrid)
}else {
area_input <- function(input,sp) {
temp <- st_area(input[input[[species]] %in% sp,])
attributes(temp) <- NULL
temp <- sum(temp)
return(temp <- temp/1000000)
}
all_area <- lapply(sp,area_input,input = input)
tmp <- cbind.data.frame(species = sp,area = unlist(all_area))
}
tmp <- merge(tmp,input[,c(species,'category')],by.x = 'species',by.y = species)
tmp <- tmp[,-4]
er_df <- cbind.data.frame(status = c('DD','LC','NT','VU','EN','CR','EW','EX'),ER = c(0.0513,0.0009,0.0071,0.0513,0.4276,0.9688,1,1))
tmp <- unique(tmp)
tmp <- merge(tmp, er_df, by.x = category, by.y = 'status', sort = TRUE)
rgrid  <-  raster(extent(target_area), resolution = res,crs = CRS(crs_ta$proj4string))
rgrid[] <- 1:ncell(rgrid)
rgrid <- st_as_sf(rasterToPolygons(rgrid))
iucn_to_grid=function(iucn_shp,grid_to_use){
r_grid_sf=grid_to_use
sf_to_intersect=iucn_shp
st_crs(r_grid_sf)=st_crs(sf_to_intersect)
sps_grid=st_intersects(sf_to_intersect,r_grid_sf)
intersected_object=sps_grid
intersected_object_t=t(intersected_object)
list_final=list()
for (i in seq_along(intersected_object_t)){
cat(i,length(intersected_object_t),'\n')
list_final[i]=intersected_object_t[i]
}
names(list_final)=1:nrow(grid_to_use)
li_2 <- lapply(seq_along(list_final), function(i) {
list_final[[i]] <- as.character(iucn_shp[[species]][list_final[[i]]])
})
li_3=li_2
names(li_3)=1:nrow(grid_to_use)
return(li_3)
}
sp_grid=iucn_to_grid(iucn_shp=input,grid_to_use=rgrid)
kba_size=res*res*10000
tmp[tmp$area<kba_size,]$area = kba_size
tmp$perc_kba <- 100*(kba_size/tmp$area)
min_rangeA1a <- 1
min_rangeA1b <- 0.5
min_rangeB1 <- 10
df_final = data.frame()
for (i in seq_along(sp_grid)){
#cat(i,length(sp_grid),'\n')
temp_df=tmp[tmp$species %in% sp_grid[[i]],]
if(nrow(temp_df)==0){
we_temp=0
wege_temp=0
ed_temp=0
edge_temp=0
ge_temp=0
KBA_A1a_temp=0
KBA_A1b_temp=0
KBA_A1e_temp=0
KBA_B1_temp=0
}else{
we_temp=lapply(1, function(x) sum(1/temp_df$area))
wege_temp=lapply(1, function(x) sum(sqrt(1/temp_df$area)*temp_df$ER))
if (ed) {
edge_temp=lapply(1, function(x) sum(log((temp_df$ED)*(temp_df$ER+1))))
ed_temp=lapply(1, function(x) sum(temp_df$ED))}else{
ed_temp=0
edge_temp=0
}
ge_temp=lapply(1, function(x) sum(temp_df$ER))
KBA_A1a_temp=lapply(1, function(x) if (any(temp_df[temp_df$category =="CR"|temp_df$category=="EN",]$perc_kba>min_rangeA1a)) {1} else {0})
KBA_A1b_temp=lapply(1, function(x) if (any(temp_df[temp_df$category=="VU",]$perc_kba>min_rangeA1b)) {1} else {0})
KBA_A1e_temp=lapply(1, function(x) if (any(temp_df$perc_kba==100)) {1} else {0})
KBA_B1_temp=lapply(1, function(x) if (any(temp_df$perc_kba>min_rangeB1)) {1} else {0})
df_temp=cbind.data.frame(i,we=unlist(we_temp),wege=unlist(wege_temp),GE=unlist(ge_temp),ED=unlist(ed_temp),EDGE=unlist(edge_temp),kba_A1a=unlist(KBA_A1a_temp),kba_A1b=unlist(KBA_A1b_temp),kba_A1e=unlist(KBA_A1e_temp),kba_B1=unlist(KBA_B1_temp))
}
df_final=rbind(df_final,df_temp)
}
r  <-  raster(extent(target_area), resolution = res,crs = CRS(crs_ta$proj4string))
r_GE=r
r_GE[]=df_final$GE
r_ED=r
r_ED[]=df_final$ED
r_EDGE=r
r_EDGE[]=df_final$EDGE
r_wege=r
r_wege[]=df_final$wege
r_we=r
r_we[]=df_final$we
r_A1a=r
r_A1a[]=df_final$kba_A1a
r_A1b=r
r_A1b[]=df_final$kba_A1b
r_A1e=r
r_A1e[]=df_final$kba_A1e
r_B1=r
r_B1[]=df_final$kba_B1
r_Kbas=sum(r_A1a,r_A1b,r_A1e,r_B1)
r_Kbas[r_Kbas>0]=1
raster_stack=stack(r_A1a,r_A1b,r_A1e,r_B1,r_GE,r_ED,r_EDGE,r_wege,r_we,r_Kbas)
plot(r_Kbas)
#plot(target_area$geometry,add=T)
return(raster_stack)
}
CRS
